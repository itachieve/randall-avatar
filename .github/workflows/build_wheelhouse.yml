name: Build vendored deps (wheelhouse) and upload to GCS

on:
  push:
    paths:
      - 'requirements.txt'
      - 'constraints.txt'
      - '.github/workflows/build_wheelhouse.yml'
  workflow_dispatch:

env:
  GCS_BUCKET: my-bucket                  # <-- change me
  GCS_PREFIX: jobs/deps                  # where to put the zip
  PYTHON_VERSION: '3.10'                 # must match your Dataproc Python

jobs:
  build-wheelhouse:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      id-token: write        # needed for workload identity (OIDC). Remove if using SA key.

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip downloads
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('requirements.txt', 'constraints.txt') }}
          restore-keys: |
            pip-${{ runner.os }}-${{ env.PYTHON_VERSION }}-

      - name: Install build tools
        run: |
          python -m pip install --upgrade pip wheel

      - name: Build wheelhouse (binary-only)
        run: |
          mkdir -p wheelhouse
          if [ -f constraints.txt ]; then
            pip download --only-binary=:all: -r requirements.txt -c constraints.txt -d wheelhouse
          else
            pip download --only-binary=:all: -r requirements.txt -d wheelhouse
          fi
          ls -lh wheelhouse

      - name: Create vendored zip
        run: |
          ZIP_NAME="vendored_deps_${{ github.sha }}.zip"
          (cd wheelhouse && zip -r "../${ZIP_NAME}" .)
          md5sum "${ZIP_NAME}" > "${ZIP_NAME}.md5"
          echo "ZIP_NAME=${ZIP_NAME}" >> $GITHUB_ENV

      # === AUTH TO GCP (choose ONE method) ===
      # -- A) Workload Identity Federation (recommended)
      - name: Auth to GCP (OIDC)
        if: ${{ !secrets.GCP_SA_KEY }}
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT_EMAIL }}

      # -- B) Service Account JSON key (fallback)
      - name: Auth to GCP (SA key)
        if: ${{ secrets.GCP_SA_KEY }}
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up gcloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Upload to GCS (versioned + latest)
        run: |
          set -euo pipefail
          VERSION_PATH="gs://${{ env.GCS_BUCKET }}/${{ env.GCS_PREFIX }}/${ZIP_NAME}"
          LATEST_PATH="gs://${{ env.GCS_BUCKET }}/${{ env.GCS_PREFIX }}/vendored_deps_latest.zip"
          gsutil cp "${ZIP_NAME}" "${VERSION_PATH}"
          gsutil cp "${ZIP_NAME}.md5" "${VERSION_PATH}.md5"
          # Optional: maintain a 'latest' pointer for convenience
          gsutil -m cp -a public-read "${ZIP_NAME}" "${LATEST_PATH}"
          echo "VERSION_URI=${VERSION_PATH}" >> $GITHUB_ENV
          echo "LATEST_URI=${LATEST_PATH}" >> $GITHUB_ENV

      - name: Output URIs
        run: |
          echo "Versioned vendored deps: $VERSION_URI"
          echo "Latest vendored deps:    $LATEST_URI"
